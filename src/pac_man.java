// autogenerated by Processing revision 1292 on 2023-03-11

import processing.core.PApplet;
import processing.core.PImage;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;

/**
 * @author Langdon S.
 */

@SuppressWarnings("StatementWithEmptyBody")
public final class pac_man extends PApplet {
    private final static String TITLE = "Pac-Man 10.6";
    private final static int cellWidth = 32;
    private final static int half_CellWidth = 16;

    private final static int pelletWorth = 10;
    private final static int canvasWidth = (cellWidth * 13);
    private final static int canvasHeight = (cellWidth * 13);
    private final static int gSize = 2;
    private final static String[] fruitPoints = {"cherry", "strawberry", "orange", "orange", "apple", "apple", "melon", "melon", "galaxian", "galaxian", "bell", "bell", "key", "key"};
    private final static byte[][] gDesign = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0}, {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0}, {0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0}, {0, 0, 1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 0, 0}, {0, 1, 1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 1, 0}, {0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0}, {0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    private final static int[][] altGhostBottom = {{0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0}, {0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0}};
    private final static boolean[][] cellMap = {{false, true, false, true, true, true, true, true, true, true, true, true}, {false, true, true, true, false, false, false, false, false, false, false, true}, {false, true, false, true, true, true, true, true, true, true, false, true}, {false, true, false, true, false, false, false, false, false, true, false, true}, {false, true, true, true, true, true, true, true, true, true, true, true}, {false, true, false, true, false, true, false, false, true, false, true, true}, {false, true, false, true, false, true, false, true, true, false, true, true}, {false, true, false, true, true, true, true, false, true, false, false, true}, {false, true, false, false, false, true, false, false, true, false, true, true}, {false, true, true, true, true, true, true, false, true, false, true, true}, {false, true, true, false, false, false, true, true, true, false, true, true}};
    //Strings
    static String errorInfo; //                   |
    private final Ghost ghost1 = new Ghost();
    private final Ghost ghost2 = new Ghost();
    private final Ghost ghost3 = new Ghost();
    private final Pacman pacman = new Pacman();
    private final Cell[][] cells = {new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13], new Cell[13]};
    private final Pixel[][] ghostPx = {new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16], new Pixel[16]};
    private final Pixel[][] ghostBottom2Px = {new Pixel[16], new Pixel[16]};
    float tempFPSVal;
    // By Langdon S.
    //current version:
    //private boolean checkForUpdates;
    private int lives = 3; //                             |
    private int chompSpeed = 8; //                        |
    private boolean playStartSound = true; //             |
    //booleans
    private boolean errorScreen;
    private boolean finishedDelay;
    private boolean first;
    private boolean first1 = true;
    private boolean lostLife;
    private boolean paused;
    private boolean pelletFirst;
    private boolean runSetup = true;
    private boolean start;
    private int startMillis;
    private int chomp = 30;
    //private int cellCount;
    private int duration;
    private int durationStart;
    private int fruitWorth;
    private int highScore;
    private int level;
    private int livesClaimed;
    private int pelletErrors;
    private int pelletsEaten;
    private int score;
    private int startFrames;
    private int coordsX;
    private int coordsY;
    private int prevHighScore;
    private String[] messages = {};
    private PImage cherry;
    private PImage strawberry;
    private PImage apple;
    private PImage orange;
    private PImage melon;
    private PImage galaxian;
    private PImage bell;
    private PImage keyI;
    private PImage restartB;
    private PImage settingsB;
    private Sound dieS;
    private Sound startSound;
    private Sound dotSound1;
    private Sound dotSound2;
    private Sound fruit;
    private Sound extra_life;
    private Sound pause;
    private Sound pause_beat;
    private Pellet[] pellet = {};
    private Coordinate[] coords2 = {};


    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ A FEW RANDOM FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~///

    public static void main(String[] passedArgs) {
        String[] appletArgs = new String[]{"pac_man"};
        if (passedArgs != null) {
            PApplet.main(concat(appletArgs, passedArgs));
        } else {
            PApplet.main(appletArgs);
        }
    }

    public void settings() {
        size(canvasWidth, canvasHeight);
    }

    public void setup() {
        surface.setTitle("Loading...");
        System.out.println("Please wait...");
        background(0);
        noStroke();
        textSize(20);
        textAlign(CENTER, CENTER);
        fill(255);
        text("Loading...\nBy Langdon Staab\n\nSound manager by Tyler Tomas\n\nwww.langdonstaab.ca", Math.round(width / 2f), Math.round(height / 2f));
        frameRate(120);
        //check setup2() for setup
    }

    private void setup2() {
        noStroke();
        surface.setResizable(true);
        imageMode(CENTER);
        changeAppIcon();

        settings.path = System.getProperty("user.home");

        String temp = loadString(settings.path + "/highscore.txt");
        if (temp.equals("error")) {
            try {
                PrintWriter file = new PrintWriter(settings.path + "/highscore.txt");
                file.println(0);
                file.close();
                prevHighScore = 0;
            } catch (FileNotFoundException e) {
                messages = splice(messages, "An error occurred while creating high score file", 0);
                System.err.println("An error occurred while creating the high score file.");
                error.log(e);
                prevHighScore = 0;
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                errorInfo += sw.toString();
            }
        } else {
            prevHighScore = java.lang.Integer.parseInt(temp);
        }
        settings.load();


        startSound = new Sound("game_start.wav");
        dotSound1 = new Sound("dot_1.wav");
        dotSound2 = new Sound("dot_2.wav");
        pause = new Sound("pause.wav");
        pause_beat = new Sound("pause_beat.wav");
        dieS = new Sound("death.wav");
        fruit = new Sound("fruit.wav");
        extra_life = new Sound("extra_life.wav");
        System.out.println("Sound load success!");

        cherry = loadImage("cherry.png");
        settingsB = loadImage("settings.png");
        restartB = loadImage("restart.png");
        strawberry = loadImage("strawberry.png");
        orange = loadImage("orange.png");
        apple = loadImage("apple.png");
        melon = loadImage("melon.png");
        System.out.println("Image load success!");

        createMaze();
        initializeMaze();
        makePelletCoords();
        pxInit();
        startMillis = millis();
        pellet[5].isFruit = true;
        surface.setTitle(TITLE);
        //checkForUpdates = settings.updateOnStart;

        System.out.println("Setup success!");
    }

    private String loadString(String filename) {
        String[] ret;
        String data;
        try {
            ret = loadStrings(filename);
            data = ret[0];
            return data;
        } catch (Exception ignored) {
            return "error";
        }
    }

    private void lazyLoad() {
        messages = splice(messages, "Loading more fruit sprites...", 0);
        galaxian = loadImage("galaxian.png");
        bell = loadImage("bell.png");
        keyI = loadImage("key.png");
        messages = splice(messages, "All fruit sprites loaded successfully.", 0);
    }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN PROGRAM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
    public void draw() {
        try {
            if (errorScreen) {
                background(0);
                textAlign(LEFT, CENTER);
                text(errorInfo, 4, height / 2f);
            } else if (runSetup) {
                setup2();
                runSetup = false;
                startFrames = frameCount;
                durationStart = millis();
                duration = 4500 + millis();
                startMillis = millis();
                println(millis());
            } else if (millis() < 2000) ;
                //display loading screen for a minimum of 2 seconds.
                //wait until 2 seconds have passed
            else if (lives <= 0) {
                background(0);
                fill(255, 64, 64);
                textAlign(CENTER);
                text("GAME OVER", canvasWidth / 2f, canvasHeight / 2f);
                text("Click the screen to play again", canvasWidth / 2f, canvasHeight / 2f + 40);
                if (mousePressed) {
                    restart();
                }
            } else {
                /*if (checkForUpdates && millis() > 60000) {
                    checkForUpdates = false;
                    settings.getNewVersion();
                    if (settings.newVersion > settings.myVersion) {
                        updatePrompt.create();
                    }
                }*/
                if (frameCount % 2 == 0 && !paused) {
                    if (millis() < duration) {
                        pacman.stop();
                        pacman.stopped = true;
                        finishedDelay = false;
                        ghost1.halt();
                        ghost2.halt();
                        ghost3.halt();
                        start = true;
                    } else if (!finishedDelay) {
                        start = true;
                        ghost1.up();
                        ghost2.up();
                        ghost3.up();
                        finishedDelay = true;
                    }

                    destroyUselessMessages();

                    ghostPx[1][1].colourInit();
                    int coords3X = getGhostCoords(ghost1).x;
                    int coords3Y = getGhostCoords(ghost1).y;
                    int coords4X = getGhostCoords(ghost2).x;
                    int coords4Y = getGhostCoords(ghost2).y;
                    int coords5X = getGhostCoords(ghost3).x;
                    int coords5Y = getGhostCoords(ghost3).y;
                    if (lostLife) {
                        if (chomp < 60) {
                            chomp++;
                        }
                        if (first1) {
                            first1 = false;
                            delay(100);
                            if (chomp < 60) {
                                chomp = 60;
                            }
                            dieS.play();
                        }
                        pacman.stop();
                        ghost1.halt();
                        ghost2.halt();
                        ghost3.halt();
                        if (dieS.isPlaying()) {
                            chomp += 3;
                        } else {
                            ghost1.newGame();
                            ghost2.newGame();
                            ghost3.newGame();
                            pacman.x = cellWidth + half_CellWidth;
                            pacman.y = cellWidth + half_CellWidth;
                            first1 = true;
                            lostLife = false;
                            chomp = 16;
                            duration = 2000 + millis();
                            pacman.stop();
                            pacman.stopped = true;
                            lives--;
                        }
                    }
                    if (!pacman.dir.equals("stopped")) {
                        if (chomp > 64) {
                            chompSpeed = -chompSpeed;
                        }
                        if (chomp < 4) {
                            chompSpeed = -chompSpeed;
                        }
                        chomp += chompSpeed;
                    }
                    if (pelletsEaten < pellet.length - 1 && !lostLife) {
                        pacman.update();
                    }
                    ghost1.update(coords3X, coords3Y);
                    ghost2.update(coords4X, coords4Y);
                    ghost3.update(coords5X, coords5Y);
                    ghost1.goodPosition(coords3X, coords3Y);
                    ghost2.goodPosition(coords4X, coords4Y);
                    ghost3.goodPosition(coords5X, coords5Y);
                    controlGhostMovement(coords3X, coords3Y, coords4X, coords4Y, coords5X, coords5Y);
                    for (int b = 0; b < coords2.length; b++) {
                        pellet[b].goodPosition(coords2[b].x, coords2[b].y);
                        pellet[b].isBEaten();
                    }

                    background(0);
                    showMaze(color(33, 33, 255));

                    if (pelletsEaten >= pellet.length - 1 && !lostLife) {
                        if (!first) {
                            first = true;
                            level++;
                            determineFruitType();
                            durationStart = millis();
                            duration = 2000 + millis();
                        }
                        ghost1.halt();
                        ghost2.halt();
                        ghost3.halt();
                        pacman.stop();
                        if ((millis() - durationStart < 250) || (millis() - durationStart < 750 && millis() - durationStart > 500) || (millis() - durationStart < 1250 && millis() - durationStart > 1000) || (millis() - durationStart < 1750 && millis() - durationStart > 1500)) {
                            showMaze(color(222, 222, 255));
                        }
                        if (millis() - durationStart >= 2000) {
                            //determineFruitType();
                            pacman.update();
                            ghost1.up();
                            ghost2.up();
                            ghost3.up();
                            pacman.stopped = true;
                            pacman.stop();
                            makePelletCoords();
                            pelletErrors = 0;
                            playStartSound = false;
                        }
                    }
                    display();
                    if (start) {
                        start = false;
                    }
                    //int useless = 5/0;
                }
                if (keyPressed) {
                    switch (keyCode) {
                        case UP, 87 -> pacman.up();
                        case DOWN, 83 -> pacman.down();
                        case RIGHT, 68 -> pacman.right();
                        case LEFT, 65 -> pacman.left();
                    }

                }
            }
        } catch (Exception e) {
            paused = true;
            error.save(e);

            errorScreen = true;
            textSize(12);
            fill(255);
            windowResize(1000, canvasHeight);
            frameRate(30);
            error.log(e);

        }
    }

    private void display() {
        drawButtons();
        fill(255);
        textAlign(CENTER);
        textSize(12);
        text("HIGH SCORE\n" + highScore, width / 2f, 12);
        tempFPSVal = ((millis() - startMillis) / 1000f) > 0 ? ((millis() - startMillis) / 1000f) : 1;
        text(str(Math.round((frameCount - startFrames) / tempFPSVal)), 330, 10);
        showLives();
        noStroke();
        for (int b = 0; b < coords2.length; b++) {
            pellet[b].draw();
        }
        drawGhosts();
        textAlign(LEFT);
        displayMessages();
        pacman.show(chomp);
        if (lives <= 0) {
            background(0);
            fill(255, 0, 0);
            textAlign(CENTER);
            text("GAME OVER", canvasWidth / 2f, canvasHeight / 2f);
            text("Click the screen to play again", canvasWidth / 2f, canvasHeight / 2f + 40);
            if (mousePressed) {
                restart();
            }
        }
    }

    private void changeAppIcon() {
        getSurface().setIcon(loadImage("icon.png"));
    }

    private void displayMessages() {
        textSize(12);
        fill(0, 255, 50);
        for (int i = 0; i < messages.length; i++) {
            text(messages[i], 20, 20 + (i * 20));
        }
    }

    private void addLife() {
        lives++;
        livesClaimed++;
        extra_life.play();
        messages = splice(messages, "Claimed extra life!", 0);
    }

    private void giveLives() {
        if (score >= 1000 && livesClaimed < 1) {
            addLife();
        } else if (score >= 2000 && livesClaimed < 2) {
            addLife();
        } else if (score >= 5000 && livesClaimed < 3) {
            addLife();
        } else if (score >= 10000 && livesClaimed < 4) {
            addLife();
        } else if (score >= 20000 && livesClaimed < 5) {
            addLife();
        } else if (score >= 50000 && livesClaimed < 6) {
            addLife();
        } else if (score >= 100000 && livesClaimed < 7) {
            addLife();
        } else if (score >= 200000 && livesClaimed < 8) {
            addLife();
        } else if (score >= 500000 && livesClaimed < 9) {
            addLife();
        } else if (score >= 1000000 && livesClaimed < 10) {
            addLife();
        }
    }

    private int createPosition(boolean dirIsX) {
        int newPos = (Math.round(random(cellWidth, canvasHeight - cellWidth * 2f) / cellWidth) * cellWidth + half_CellWidth);
        while (dirIsX && newPos <= (cellWidth * 2) + half_CellWidth) {
            newPos = (Math.round(random(cellWidth, canvasHeight - cellWidth * 2f) / cellWidth) * cellWidth + half_CellWidth);
        }
        return newPos;
    }

    private boolean hitBoxCollision(int cellX, int cellY, float objectX, float objectY) {
        return objectX > cellX && objectX < cellX + cellWidth && objectY > cellY && objectY < cellY + cellWidth;
    }

    private void makePelletCoords() {
        for (int i = 0; i < pellet.length; i++) {
            coords2[i].x = Math.round((float) (pellet[i].x / cellWidth) + 0.5f) - 1;
            coords2[i].y = Math.round((float) (pellet[i].y / cellWidth) + 0.5f) - 1;
        }
    }

    private void pxInit() {
        for (int i = 0; i < ghostPx.length; i++) {
            for (int j = 0; j < ghostPx.length; j++) {
                ghostPx[i][j] = new Pixel(gDesign[i][j], j * gSize, i * gSize);
            }
        }
        for (int i = 0; i < altGhostBottom.length; i++) {
            for (int j = 0; j < altGhostBottom[0].length; j++) {
                ghostBottom2Px[i][j] = new Pixel(altGhostBottom[i][j], j * gSize, (i + 13) * gSize);
            }
        }
    }


////// Calling Things //////

    private boolean checkGoodDir(String dir, int posX, int posY) {
        boolean goodDir = true;
        switch (dir) {
            case "up" -> {
                if (posY - 1 >= 0) {
                    goodDir = cells[posX][posY - 1].open;
                }
            }
            case "down" -> {
                if (posY + 1 <= height / cellWidth) {
                    goodDir = cells[posX][posY + 1].open;
                }
            }
            case "right" -> {
                if (posX + 1 <= width / cellWidth) {
                    goodDir = cells[posX + 1][posY].open;
                }
            }
            case "left" -> {
                if (posX - 1 >= 0) {
                    goodDir = cells[posX - 1][posY].open;
                }
            }
        }
        return !goodDir;
    }


//////// FUNCTIONS ////////

    private String makeDir(int Var) {
        return switch (Var) {
            case 0 -> "up";
            case 1 -> "down";
            case 2 -> "right";
            case 3 -> "left";
            default -> "stopped";
        };
    }

    private int makeDirNum() {
        float tempDirNum = random(-0.1f, 4);
        int dirNum = floor(tempDirNum);
        dirNum = constrain(dirNum, 0, 3);
        return dirNum;
    }

    private void createMaze() {
        for (int i = 0; i < cellMap[1].length + 1; i++) {
            for (int j = 0; j < cellMap[1].length + 1; j++) {
                cells[i][j] = new Cell(i * cellWidth, j * cellWidth);
            }
        }
    }

    private void initializeMaze() {
        for (Cell[] cell : cells) {
            cell[0].open = false;
            cell[cells.length - 1].open = false;
        }
        for (int i = 0; i < cells[0].length; i++) {
            cells[0][i].open = false;
            cells[cells.length - 1][i].open = false;
        }
        for (int row = 1; row < cellMap.length + 1; row++) {
            for (int col = 0; col < cellMap[row - 1].length; col++) {
                cells[col][row].open = cellMap[row - 1][col];
                if (cellMap[row - 1][col]) {
                    ////noinspection StatementWithEmptyBody
                    if (col > 1 || row > 1) {
                        // } else {
                        pellet = (Pellet[]) append(pellet, new Pellet(col * cellWidth + half_CellWidth, row * cellWidth + half_CellWidth));
                        coords2 = (Coordinate[]) append(coords2, new Coordinate());
                        //cellCount++;
                    }
                }
            }
        }
    }

    private void showMaze(int mazeColor) {
        for (Cell[] cell : cells) {
            for (Cell value : cell) {
                value.show(mazeColor);
            }
        }
    }

    private void destroyUselessMessages() {
        while (messages.length > 6) {
            messages = shorten(messages);
        }
        if (millis() % 25 == 0 && (millis() - startMillis) > 500 && messages.length > 0) {
            messages = shorten(messages);
        }
        if (messages.length > 4) {
            messages = shorten(messages);
        }
    }

    private void showLives() {
        int size = 20;
        float sizeT, sizeB;
        sizeT = map(size, 0, 60, 0, 0.52f);
        sizeB = map(size, 0, 60, TWO_PI, 5.76f);
        fill(255, 202, 0);
        for (int x = 1; x < lives; x++) {
            arc(25 * x, height - half_CellWidth, 20, 20, sizeT, sizeB);
        }
    }

    private void increaseHighScore() throws FileNotFoundException {
        if (prevHighScore > highScore) {
            highScore = prevHighScore;
        }
        if (score > highScore) {
            highScore = score;
        }
        if (highScore > prevHighScore) {
            PrintWriter out = new PrintWriter(settings.path + "/highscore.txt");
            out.println(str(highScore));
            out.close();
        }
    }

    private void restart() {
        lives = 3;
        lostLife = false;
        level = 0;
        playStartSound = true;
        makePelletCoords();
        pacman.update();
        pacman.x = cellWidth + half_CellWidth;
        pacman.y = cellWidth + half_CellWidth;
        score = 0;
        determineFruitType();
        for (Pellet value : pellet) {
            value.update();
        }
        durationStart = millis();
        duration = 4500 + millis();
    }

    private void restartButton() {
        int x = cellWidth * 4, y = cellWidth * 12;
        if (hitBoxCollision(x, y, mouseX, mouseY)) {
            restart();
        }
    }

    private void pauseButton() {
        int x = cellWidth * 5, y = cellWidth * 12;
        if (hitBoxCollision(x, y, mouseX, mouseY)) {
            if (paused) {
                pause_beat.stop();

            } else {
                pause.play();
                if (settings.playPauseBeat) {
                    pause_beat.rewind();
                    pause_beat.loop();
                }
            }
            delay(10);
            paused = !paused;
        }
    }

    private void pauseBeatOffButton() {
        int x = cellWidth * 3, y = cellWidth * 12;
        if (hitBoxCollision(x, y, mouseX, mouseY)) {
            SettingsWindow.create();
        }
    }

    private void drawButtons() {
        image(restartB, cellWidth * 4 + half_CellWidth, cellWidth * 12 + half_CellWidth, cellWidth - 4, cellWidth - 4);

        image(settingsB, cellWidth * 3 + half_CellWidth, cellWidth * 12 + half_CellWidth, cellWidth - 4, cellWidth - 4);
        fill(0);
        rect(cellWidth * 5.2f, cellWidth * 12.1f, cellWidth / 4f, cellWidth * 0.8f, 10);
        rect(cellWidth * 5.55f, cellWidth * 12.1f, cellWidth / 4f, cellWidth * 0.8f, 10);
    }

    private void determineFruitType() {
        if (level == 8) {
            println(fruitPoints[level]);
            lazyLoad();
        }
        if (level < fruitPoints.length) {
            pellet[5].fruitType = fruitPoints[level];
        } else {
            pellet[5].fruitType = fruitPoints[fruitPoints.length - 1];
        }
    }

    public void mouseClicked() {
        //if (!updating) {
        pauseBeatOffButton();
        restartButton();
        pauseButton();
        // }
    }

    private Coordinate getGhostCoords(Ghost curGhost) {
        int a = 3, b = 1;
        float offsetY = 0, offsetX = 0;
        Coordinate curGhostCoords = new Coordinate();
        switch (curGhost.dir) {
            case "up" -> offsetY += (float) (cellWidth / a) + b;
            case "down" -> offsetY -= ((float) (cellWidth / a)) + b;
            case "right" -> offsetX -= (float) (cellWidth / a) + b;
            case "left" -> offsetX += (float) (cellWidth / a) + b;
        }
        curGhostCoords.x = Math.round((curGhost.x + offsetX) / cellWidth + 0.5f) - 1;
        curGhostCoords.y = Math.round((curGhost.y + offsetY) / cellWidth + 0.5f) - 1;
        return curGhostCoords;
    }

    private void drawGhostEyes(Ghost cGhost) {
        int x = 7;
        int y = 11;
        rectMode(CORNER);
        rectMode(CORNER);
        fill(63, 0, 252);
        switch (cGhost.dir) {
            case "up" -> y -= 2;
            case "down" -> y += 2;
            case "right" -> x += 2;
            case "left" -> x -= 2;
        }
        rect(x, y, 4, 4);
        rect(x + 12, y, 4, 4);
    }

    private void drawGhosts() {
        if (!ghost1.dir.equals("stopped") || settings.showGhostWhenStopped) {
            translate(ghost1.x - 15, ghost1.y - 15);
            for (int i = 0; i < ghostPx.length; i++) {
                for (int j = 0; j < ghostPx.length; j++) {
                    if ((i == 14 || i == 13) && (frameCount - startFrames) % 100 < 45) {
                        ghostBottom2Px[i - 13][j].colourInit();
                        ghostBottom2Px[i - 13][j].draw(color(208, 62, 25));
                    } else {
                        ghostPx[i][j].colourInit();
                        ghostPx[i][j].draw(color(208, 62, 25));
                    }
                }
            }
            drawGhostEyes(ghost1);
            resetMatrix();
        }
        if (!ghost2.dir.equals("stopped") || settings.showGhostWhenStopped) {
            translate(ghost2.x - 15, ghost2.y - 15);
            for (int i = 0; i < ghostPx.length; i++) {
                for (int j = 0; j < ghostPx.length; j++) {
                    if ((i == 14 || i == 13) && (frameCount - startFrames) % 100 < 45) {
                        ghostBottom2Px[i - 13][j].colourInit();
                        ghostBottom2Px[i - 13][j].draw(color(234, 130, 229));
                    } else {
                        ghostPx[i][j].colourInit();
                        ghostPx[i][j].draw(color(234, 130, 229));
                    }
                }
            }
            drawGhostEyes(ghost2);
            resetMatrix();
        }
        if (!ghost3.dir.equals("stopped") || settings.showGhostWhenStopped) {
            translate(ghost3.x - 15, ghost3.y - 15);
            for (int i = 0; i < ghostPx.length; i++) {
                for (int j = 0; j < ghostPx.length; j++) {
                    if ((i == 14 || i == 13) && (frameCount - startFrames) % 100 < 45) {
                        ghostBottom2Px[i - 13][j].colourInit();
                        ghostBottom2Px[i - 13][j].draw(color(70, 191, 238));
                    } else {
                        ghostPx[i][j].colourInit();
                        ghostPx[i][j].draw(color(70, 191, 238));
                    }
                }
            }
            drawGhostEyes(ghost3);
            resetMatrix();
        }
    }

    private String createRDir(int posX, int posY) {
        int tempVar = Math.round(random(3));
        String possDir = makeDir(tempVar);
        while (checkGoodDir(possDir, posX, posY)) {
            tempVar = makeDirNum();
            possDir = makeDir(tempVar);
        }
        return possDir;
    }

    private void controlGhostMovement(int pos1x, int pos1y, int pos2x, int pos2y, int pos3x, int pos3y) {
        if (checkGoodDir(ghost1.dir, pos1x, pos1y)) {
            ghost1.dir = createRDir(pos1x, pos1y);
        }
        if (checkGoodDir(ghost2.dir, pos2x, pos2y)) {
            ghost2.dir = createRDir(pos2x, pos2y);
        }
        if (checkGoodDir(ghost3.dir, pos3x, pos3y)) {
            ghost3.dir = createRDir(pos3x, pos3y);
        }
    }

    //// OBJECTS \\\\
    private final class Ghost {
        private int x;
        private int y;
        private String dir;

        private Ghost() {
            x = createPosition(true);
            y = createPosition(false);
            dir = "up";
        }

        private void update(int coordsX, int coordsY) {
            switch (dir) {
                case "up" -> {
                    if (coordsY - 1 >= 0) {
                        if (cells[coordsX][coordsY - 1].open) {
                            x = coordsX * cellWidth + (half_CellWidth);
                            y -= settings.ghostSpeed;
                        }
                    }
                }
                case "down" -> {
                    if (coordsY + 1 <= height / cellWidth) {
                        if (cells[coordsX][coordsY + 1].open) {
                            x = coordsX * cellWidth + (half_CellWidth);
                            y += settings.ghostSpeed;
                        }
                    }
                }
                case "right" -> {
                    if (coordsX + 1 <= width / cellWidth) {
                        if (cells[coordsX + 1][coordsY].open) {
                            y = coordsY * cellWidth + (half_CellWidth);
                            x += settings.ghostSpeed;
                        }
                    }
                }
                case "left" -> {
                    if (coordsX - 1 >= 0) {
                        if (cells[coordsX - 1][coordsY].open) {
                            y = coordsY * cellWidth + (half_CellWidth);
                            x -= settings.ghostSpeed;
                        }
                    }
                }
            }
            if (dist(x, y, pacman.x, pacman.y) < half_CellWidth) {
                if (x >= cellWidth * 2) {
                    lostLife = true;
                }
            }
        }

        private void up() {
            dir = "up";
        }

        private void right() {
            dir = "right";
        }

        private void halt() {
            //stopped = true;
            dir = "stopped";
        }

        private void newGame() {
            x = createPosition(true);
            y = createPosition(false);
        }

        private void goodPosition(int coordsX, int coordsY) {
            if (!cells[coordsX][coordsY].open) {
                newGame();
                messages = splice(messages, "Adjustment in Progress...", 0);
            }
            if (coordsX == 1) {
                right();
            }
            if (x > canvasWidth - cellWidth || x < cellWidth || y > canvasHeight - cellWidth || y < cellWidth) {
                messages = splice(messages, "Adjustment in Progress...", 0);
                newGame();
            }
        }
    }

    // Cell \\
    final class Cell {
        private final int x;
        private final int y;
        boolean open;

        private Cell(int x1, int y1) {
            x = x1;
            y = y1;
        }

        private void show(int colour) {

            if (!open) {
                fill(colour);
                rect(x, y, cellWidth, cellWidth);
            }

        }
    }


    //// Pellet \\\\
    final class Pellet {
        private int x;
        private int y;
        private boolean eaten = false;
        private boolean isFruit = false;
        private String fruitType = "cherry";

        private Pellet(int x1, int y1) {
            x = x1;
            y = y1;
        }

        void update() {
            pelletsEaten = 0;
            eaten = false;
            if (isFruit) {
                fruitWorth = 100;
            }
        }

        private void isBEaten() throws FileNotFoundException {
            if (!eaten && dist(x, y, pacman.x, pacman.y) < cellWidth / 8f + Pacman.size / 8f) {
                if (isFruit) {
                    switch (fruitType) {
                        case "cherry" -> fruitWorth = 100;
                        case "strawberry" -> fruitWorth = 300;
                        case "orange" -> fruitWorth = 500;
                        case "apple" -> fruitWorth = 700;
                        case "melon" -> fruitWorth = 1000;
                        case "galaxian" -> fruitWorth = 2000;
                        case "bell" -> fruitWorth = 3000;
                        case "key" -> fruitWorth = 5000;
                    }
                    score += fruitWorth;
                    fruit.play();
                } else {
                    if (!pelletFirst) {
                        dotSound2.play();
                        pelletFirst = true;
                    } else {
                        dotSound1.play();
                        pelletFirst = false;
                    }
                    score += pelletWorth;
                    pelletsEaten++;
                }
                eaten = true;
                giveLives();
                messages = splice(messages, "Your score is:" + str(score), 0);
                increaseHighScore();
            }
        }

        private void draw() {
            if (!eaten) {
                noStroke();
                if (isFruit) {
                    switch (fruitType) {
                        case "strawberry" -> image(strawberry, x, y, cellWidth, cellWidth);
                        case "orange" -> image(orange, x, y, cellWidth, cellWidth);
                        case "apple" -> image(apple, x, y, cellWidth, cellWidth);
                        case "melon" -> image(melon, x, y, cellWidth, cellWidth);
                        case "galaxian" -> image(galaxian, x, y, cellWidth, cellWidth);
                        case "bell" -> image(bell, x, y, cellWidth, cellWidth);
                        case "key" -> image(keyI, x, y, cellWidth, cellWidth);
                        default -> image(cherry, x, y, cellWidth, cellWidth);
                    }
                } else {
                    noStroke();
                    fill(255, 150, 0);
                    ellipse(x, y, half_CellWidth - 1, half_CellWidth - 1);
                }
            }
        }

        private void goodPosition(int coordsX1, int coordsY1) {
            boolean a = false;
            if (coordsY1 == 1 && !isFruit) {
                if (coordsX1 == 1 || coordsX1 == 8) {
                    a = true;
                }
            }
            if (!cells[coordsX1][coordsY1].open || a) {
                update();
                x = createPosition(true);
                y = createPosition(false);
                while (dist(x, y, pacman.x, pacman.y) < half_CellWidth) {
                    x = createPosition(true);
                    y = createPosition(false);
                }
                fill(255, 128, 255);
                ellipse(x, y, half_CellWidth - 1, half_CellWidth - 1);
                pelletErrors++;
                messages = splice(messages, "Adjustment in Progress...", 0);
                messages = splice(messages, str(pelletErrors) + "pellet(s) were misplaced", 0);
                makePelletCoords();
            }
            if (isFruit) {
                y = cellWidth + half_CellWidth;
            }
        }
    }

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Pacman~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    final class Pacman {
        static final int size = cellWidth - 1;
        //private static final int speed = settings.pacmanSpeed;
        int x = half_CellWidth + cellWidth;
        int y = half_CellWidth + cellWidth;
        private boolean stopped = true;
        private String nextDir = "stopped";
        private String dir = "stopped";
        private String lastDir = "stopped";

        @SuppressWarnings("IntegerDivisionInFloatingPointContext")
        private void show(int mouthSize) {
            float mouthOpenTop, mouthOpenBottom;
            if (stopped && settings.startsAsCircle) {
                mouthSize = 0;
                if (playStartSound) {
                    startSound.play();
                    playStartSound = false;
                }
            }
            fill(255, 255, 0);
            translate(x, y);
            switch (lastDir) {
                case "up" -> rotate(PI + HALF_PI);
                case "down" -> rotate(HALF_PI);
                case "left" -> rotate(PI);
            }
            mouthOpenTop = map(mouthSize, 0, 60, 0, 0.52f);
            mouthOpenBottom = map(mouthSize, 0, 60, TWO_PI, 5.76f);

            arc(0, 0, (cellWidth / 16) * 15, (cellWidth / 16) * 15, mouthOpenTop, mouthOpenBottom);

            resetMatrix();
        }

        private void update() {
            if (settings.useClassicHitbox) {
                float offsetX = 0.2f;
                float offsetY = 0.1f;
                float a = 3;
                float b = 1;
                switch (dir) {
                    case "up" -> offsetY += (cellWidth / a) + b;
                    case "down" -> offsetY -= (cellWidth / a) + b;
                    case "right" -> offsetX -= (cellWidth / a) + b;
                    case "left" -> offsetX += (cellWidth / a) + b;
                }
                coordsX = round((x + offsetX) / cellWidth + 0.5f) - 1;
                coordsY = round((y + offsetY) / cellWidth + 0.5f) - 1;
            } else {
                coordsX = Math.round(((float) (x / cellWidth)) + 0.5f) - 1;
                coordsY = Math.round(((float) (y / cellWidth)) + 0.5f) - 1;
            }
            if (pelletsEaten >= pellet.length - 1) {
                for (Pellet value : pellet) {
                    value.update();
                }
                first = false;
                coordsX = 1;
                coordsY = 1;
                x = cellWidth + half_CellWidth;
                y = cellWidth + half_CellWidth;
                dir = "stopped";
                nextDir = "stopped";
            }

            switch (nextDir) {
                case "up" -> {
                    if (cells[coordsX][coordsY - 1].open) {
                        dir = nextDir;
                        x = coordsX * cellWidth + (half_CellWidth);
                    }
                }
                case "down" -> {
                    if (cells[coordsX][coordsY + 1].open) {
                        dir = nextDir;
                        x = coordsX * cellWidth + (half_CellWidth);
                    }
                }
                case "right" -> {
                    if (cells[coordsX + 1][coordsY].open) {
                        dir = nextDir;
                        y = coordsY * cellWidth + (half_CellWidth);
                    }
                }
                case "left" -> {
                    if (cells[coordsX - 1][coordsY].open) {
                        dir = nextDir;
                        y = coordsY * cellWidth + (half_CellWidth);
                    }
                }
            }
            if (settings.useClassicHitbox) {
                switch (dir) {
                    case "up" -> {
                        if (cells[parseInt(coordsX)][parseInt(coordsY) - 1].open) {
                            y -= settings.pacmanSpeed;
                            stopped = false;
                            if (x < coordsX * cellWidth + (half_CellWidth)) {
                                x++;
                            }
                            if (x > coordsX * cellWidth + (half_CellWidth)) {
                                x--;
                            }
                            lastDir = "up";
                        } else {
                            dir = nextDir;
                            nextDir = "stopped";
                        }
                    }
                    case "down" -> {
                        if (cells[parseInt(coordsX)][parseInt(coordsY) + 1].open) {
                            y += settings.pacmanSpeed;
                            stopped = false;
                            if (x < coordsX * cellWidth + (half_CellWidth)) {
                                x++;
                            }
                            if (x > coordsX * cellWidth + (half_CellWidth)) {
                                x--;
                            }
                            lastDir = "down";
                        } else {
                            dir = nextDir;
                            nextDir = "stopped";
                        }
                    }
                    case "right" -> {
                        if (cells[parseInt(coordsX) + 1][parseInt(coordsY)].open) {
                            x += settings.pacmanSpeed;
                            stopped = false;
                            if (y < coordsY * cellWidth + (half_CellWidth)) {
                                y++;
                            }
                            if (y > coordsY * cellWidth + (half_CellWidth)) {
                                y--;
                            }
                            lastDir = "right";
                        } else {
                            dir = nextDir;
                            nextDir = "stopped";
                        }
                    }
                    case "left" -> {
                        if (cells[parseInt(coordsX) - 1][parseInt(coordsY)].open) {
                            x -= settings.pacmanSpeed;
                            stopped = false;
                            if (y < coordsY * cellWidth + (half_CellWidth)) {
                                y++;
                            }
                            if (y > coordsY * cellWidth + (half_CellWidth)) {
                                y--;
                            }
                            lastDir = "left";
                        } else {
                            dir = nextDir;
                            nextDir = "stopped";
                        }
                    }
                    case "stopped" -> {
                        if (x < coordsX * cellWidth + (half_CellWidth)) {
                            x++;
                        }
                        if (x > coordsX * cellWidth + (half_CellWidth)) {
                            x--;
                        }
                        if (y < coordsY * cellWidth + (half_CellWidth)) {
                            y++;
                        }
                        if (y > coordsY * cellWidth + (half_CellWidth)) {
                            y--;
                        }
                    }
                }

            } else {


                int stopBuffer = 2;
                switch (dir) {
                    case "up" -> {
                        if (cells[coordsX][coordsY - 1].open) {
                            y -= settings.pacmanSpeed;
                            stopped = false;
                            if (x < coordsX * cellWidth + (half_CellWidth)) {
                                x += settings.pacmanSpeed;
                            }
                            if (x > coordsX * cellWidth + (half_CellWidth)) {
                                x -= settings.pacmanSpeed;
                            }
                            lastDir = "up";
                        } else {
                            if (y <= (coordsY * cellWidth + (half_CellWidth)) + stopBuffer) {
                                dir = nextDir;
                                nextDir = "stopped";
                            } else {
                                y -= settings.pacmanSpeed;
                            }
                        }
                    }
                    case "down" -> {
                        if (cells[coordsX][coordsY + 1].open) {
                            y += settings.pacmanSpeed;
                            stopped = false;
                            if (x < coordsX * cellWidth + (half_CellWidth)) {
                                x += settings.pacmanSpeed;
                            }
                            if (x > coordsX * cellWidth + (half_CellWidth)) {
                                x -= settings.pacmanSpeed;
                            }
                            lastDir = "down";
                        } else {
                            if (y >= (coordsY * cellWidth + (half_CellWidth)) - stopBuffer) {
                                dir = nextDir;
                                nextDir = "stopped";
                            } else {
                                y += settings.pacmanSpeed;
                            }
                        }
                    }
                    case "right" -> {
                        if (cells[coordsX + 1][coordsY].open) {
                            x += settings.pacmanSpeed;
                            stopped = false;
                            if (y < coordsY * cellWidth + (half_CellWidth)) {
                                y += settings.pacmanSpeed;
                            }
                            if (y > coordsY * cellWidth + (half_CellWidth)) {
                                y -= settings.pacmanSpeed;
                            }
                            lastDir = "right";
                        } else {
                            if (x >= (coordsX * cellWidth + (half_CellWidth)) - stopBuffer) {
                                dir = nextDir;
                                nextDir = "stopped";
                            } else {
                                x += settings.pacmanSpeed;
                            }
                        }
                    }
                    case "left" -> {
                        if (cells[coordsX - 1][coordsY].open) {
                            x -= settings.pacmanSpeed;
                            stopped = false;
                            if (y < coordsY * cellWidth + (half_CellWidth)) {
                                y += settings.pacmanSpeed;
                            }
                            if (y > coordsY * cellWidth + (half_CellWidth)) {
                                y -= settings.pacmanSpeed;
                            }
                            lastDir = "left";
                        } else {
                            if (x <= (coordsX * cellWidth + (half_CellWidth)) + stopBuffer) {
                                dir = nextDir;
                                nextDir = "stopped";
                            } else {
                                x -= settings.pacmanSpeed;
                            }
                        }
                    }
                    case "stopped" -> {
                        if (x < coordsX * cellWidth + (half_CellWidth)) {
                            x += settings.pacmanSpeed;
                        }
                        if (x > coordsX * cellWidth + (half_CellWidth)) {
                            x -= settings.pacmanSpeed;
                        }
                        if (y < coordsY * cellWidth + (half_CellWidth)) {
                            y += settings.pacmanSpeed;
                        }
                        if (y > coordsY * cellWidth + (half_CellWidth)) {
                            y -= settings.pacmanSpeed;
                        }
                    }
                }
            }

            if (x > 400) {
                x = cellWidth + size / 2;
            }
            if (y > 400) {
                y = cellWidth + size / 2;
            }
            coordsX = Math.round((float) (x / cellWidth) + 0.5f) - 1;
            coordsY = Math.round((float) (y / cellWidth) + 0.5f) - 1;
        }

        private void up() {
            coordsX = Math.round(((float) x / cellWidth) + 0.5f) - 1;
            coordsY = Math.round((float) (y / cellWidth) + 0.5f) - 1;
            if (cells[coordsX][coordsY - 1].open) {
                dir = "up";
                nextDir = "up";
                if (x < coordsX * cellWidth + (half_CellWidth)) {
                    x += settings.pacmanSpeed;
                }
                if (x > coordsX * cellWidth + (half_CellWidth)) {
                    x -= settings.pacmanSpeed;
                }
            } else {
                nextDir = "up";
            }

            // }
        }

        private void down() {
            coordsX = Math.round(((float) (x / cellWidth)) + 0.5f) - 1;
            coordsY = Math.round((float) (y / cellWidth) + 0.5f) - 1;
            if (cells[coordsX][coordsY + 1].open) {
                dir = "down";
                nextDir = "down";
                if (x < coordsX * cellWidth + (half_CellWidth)) {
                    x += settings.pacmanSpeed;
                }
                if (x > coordsX * cellWidth + (half_CellWidth)) {
                    x -= settings.pacmanSpeed;
                }
            } else {
                nextDir = "down";
            }


        }

        private void right() {
            coordsX = Math.round((float) (x / cellWidth) + 0.5f) - 1;
            coordsY = Math.round((float) (y / cellWidth) + 0.5f) - 1;
            if (cells[coordsX + 1][coordsY].open) {
                dir = "right";
                nextDir = "right";
                if (y < coordsY * cellWidth + (half_CellWidth)) {
                    y += settings.pacmanSpeed;
                }
                if (y > coordsY * cellWidth + (half_CellWidth)) {
                    y -= settings.pacmanSpeed;
                }
            } else {
                nextDir = "right";
            }


        }

        private void left() {
            coordsX = Math.round(((float) (x / cellWidth)) + 0.5f) - 1;
            coordsY = Math.round(((float) (y / cellWidth)) + 0.5f) - 1;
            if (cells[coordsX - 1][coordsY].open) {
                dir = "left";
                nextDir = "left";
                if (y < coordsY * cellWidth + (half_CellWidth)) {
                    y += settings.pacmanSpeed;
                }
                if (y > coordsY * cellWidth + (half_CellWidth)) {
                    y -= settings.pacmanSpeed;
                }
            } else {
                nextDir = "left";
            }

        }


        private void stop() {
            dir = "stopped";
            stopped = false;
            nextDir = "stopped";
        }
    }

    private final class Pixel {
        private static int size;
        private final int colourCode;
        private final int x;
        private final int y;
        private int colour;

        private Pixel(int colourCode1, int x1, int y1) {
            colourCode = colourCode1;
            size = 2;
            x = x1;
            y = y1;
        }

        private void colourInit() {
            switch (colourCode) {
                case 0 -> colour = color(255, 0);
                case 2, 3 -> colour = color(255);
                default -> colour = color(255, 0, 0);
            }
        }


        private void draw(int gColour) {
            if (colourCode == 1) {
                colour = gColour;
            }
            rectMode(CENTER);
            fill(colour);
            rect(x, y, size, size);
            rectMode(CORNER);
        }
    }
}
